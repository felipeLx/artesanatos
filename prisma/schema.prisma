// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model OrderStatus {
  id       String  @id @default(cuid())
  status   String

  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String?
}

model OrderFulfillmentStatus {
  id       String  @id @default(cuid())
  status   String

  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String?
}

model OrderPaymentStatus {
  id       String  @id @default(cuid())
  status   String

  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String?
}

model SwapFulfillmentStatus {
  id       String  @id @default(cuid())
  status   String

  swap   Swap?   @relation(fields: [swapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swapId String?
}

model SwapPaymentStatus {
  id       String  @id @default(cuid())
  status   String

  swap   Swap?   @relation(fields: [swapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swapId String?
}
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?
  stripeCustomerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  address     Address[]
  products    Product[]
  roles       Role[]
  sessions    Session[]
  cart Cart[]
  order Order[]
}

model Address {
  // address_id: A surrogate primary key used to uniquely identify each address in the table.
  id      String @id @default(cuid())
  // address: The first line of an address.
  address String
  // address2: An optional second line of an address.
  address2 String?
  // district: The region of an address, this may be a state, province, prefecture, etc.
  state String
  // city_id: A foreign key pointing to the city table.
  city String
  // postal_code: The postal code or ZIP code of the address (where applicable).
  postalCode String
  // phone: The telephone number for the address.
  phone String
  // last_update: When the row was created or most recently updated.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String

  cart Cart[]
  payment Payment[]
  order Order[]
  swap Swap[]
}

model Product {
  id      String @id @default(cuid())
  title   String
  description String
  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  productVariation ProductVariation[]
  images ProductImage[]
  colorVariation ColorVariation[]
  optionsVariation OptionsVariation[]
  
  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model OptionsVariation {
  id          String  @id @default(cuid())
  name        String

  product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String?
  
  // non-unique foreign key
  @@index([productId])
}

model ProductVariation {
  id          String  @id @default(cuid())
  productStripeId String
  price       Int
  quantity    Int
  weight      Int
  height      Int
  width       Int

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String

  // non-unique foreign key
  @@index([productId])

}
model ColorVariation {
  id   String  @id @default(cuid())
  name String
  hexCode String

  product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?

  // non-unique foreign key
  @@index([productId])
}
model ProductImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
  
  // non-unique foreign key
  @@index([productId])
}

model Order {
  id String  @id @default(cuid())
  
  cart   Cart?  @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId String?
  customer   User?   @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String?
  Address   Address?   @relation(fields: [billingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billingAddressId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  canceledAt DateTime? @updatedAt
  deletedAt DateTime? @updatedAt
  
  orderStatus OrderStatus[]
  orderFulfillmentStatus OrderFulfillmentStatus[]
  paymentStatus OrderPaymentStatus[]
  payment Payment[]
  swap Swap[]
}
model Swap {
  id String  @id @default(cuid())
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId String
  address   Address   @relation(fields: [billingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billingAddressId String
  createdAt DateTime @default(now())
  updatedAt DateTime? @default(now())
  canceledAt DateTime? @updatedAt
  deteletedAt DateTime? @updatedAt
  confirmedAt DateTime? @updatedAt

  fulfillmentStatus SwapFulfillmentStatus[]
  paymentStatus SwapPaymentStatus[]
  payment Payment[]
}
model Payment {
    id String  @id @default(cuid())

  swap   Swap   @relation(fields: [swapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  swapId String
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String

  cart Cart[]
  amount Int
  currencyCode String
  amountRefunded Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  canceledAt DateTime? @updatedAt
  capturedAt DateTime? @updatedAt
}
model Cart {
    id String  @id @default(cuid())
    
    address   Address   @relation(fields: [billingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    billingAddressId String
    customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    customerId String
    payment Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    paymentId String
  
    completedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    deletedAt DateTime @updatedAt

    order Order[]
    swap Swap[]
}
model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}